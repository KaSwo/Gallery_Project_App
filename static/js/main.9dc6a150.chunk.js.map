{"version":3,"sources":["components/Gallery/gallery.jsx","components/Search/search.jsx","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["Gallery","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRequest","query","prevOrNext","gallery","state","requestUrl","concat","fetch","headers","Authorization","accept","then","resp","ok","json","console","log","data","setState","showImage","largeImageUrl","indexInGallery","closeImage","switchImage","e","_this$state","target","innerText","photos","src","large","length","prevProps","term","largeImage","_this2","_this$state2","react_default","a","createElement","className","alt","onClick","map","photo","index","key","id","medium","prev_page","next_page","React","Component","Search","loadText","tag","inputVal","handleChangeForAll","event","defineProperty","name","value","option","placeholder","onChange","App","setText","text","search","Gallery_gallery","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9dc6a150.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Gallery extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gallery: null,\n            largeImageUrl: '',\n            indexInGallery: null\n        };\n    }\n\n    componentDidMount() {\n        this.handleRequest()//Wywołaj metodę pobierającą zdjęcia przy starcie aplikacji (bez przekazywania parametrów)\n    }\n    componentDidUpdate(prevProps) {\n        const {term} = this.props;\n        if(prevProps.term !== term) { //Sprawdzenie czy tekst(tag) się zmienił\n            this.handleRequest(term) //Wywołaj metodę pobierającą zdjęcia z przekazanym tekstem(tagiem) jako pierwszy parametr metody handleRequest. Nie przekazuje drugiego parametru.\n        }\n    }\n    handleRequest = (query,prevOrNext) => { //Metoda pobierająca zdjęcia - jako parametry może (nie musi) przyjmować tekst oraz url do poprzedniej/następnej strony\n        const {gallery} = this.state; //Destrukturyzacja\n        let requestUrl = ''; //Deklaracja zmiennej przechowującej adres Url API (lub jego końcówkę)\n        if(prevOrNext) { //Jeżeli został przekazany argument prevOrNext\n            requestUrl = prevOrNext; //Przypisz zmiennej ten argument (będący adresem Url API)\n        } else if(query) { //Jeżeli zostało przekazane jakieś query(tag)\n            requestUrl = `https://api.pexels.com/v1/search?query=${query}`; //Przypisz zmiennej adres z tym query\n        } else if(!gallery || !query) { //Jeżeli state gallery jest puste(componentDidMount), albo nie ma query(zostało skasowane)\n            requestUrl = 'https://api.pexels.com/v1/curated'; //Przypisz zmiennej adres domyślny\n        }\n        fetch(requestUrl, { //Ściągaj z API po adresie requestUrl\n            headers: {\n                \"Authorization\": \"563492ad6f9170000100000119b2c277c7c340bbab928823d2551d3b\",\n                \"accept\": \"application/json\"\n            }\n        })\n        .then(resp => {\n            if(resp.ok) {\n                return resp.json()\n            } else {\n                console.log(resp)\n            }\n        })\n        .then(data => {\n            console.log(data);\n            this.setState({\n                gallery: data //Cały objekt galerii\n            })\n        })\n    };\n    showImage = (largeImageUrl, indexInGallery) => {\n        this.setState({\n            largeImageUrl,\n            indexInGallery\n        })\n    };\n    closeImage = () => {\n        this.setState({\n          largeImageUrl: ''\n        })\n    };\n    switchImage = (e) => {\n        const {gallery,indexInGallery} = this.state;\n        if(e.target.innerText === '<') {\n            if(indexInGallery > 0) {\n                this.setState({\n                    largeImageUrl: gallery.photos[indexInGallery - 1].src.large,\n                    indexInGallery: indexInGallery - 1\n                })\n            }\n        } else {\n            if(indexInGallery < gallery.photos.length - 1) {\n                this.setState({\n                    largeImageUrl: gallery.photos[indexInGallery + 1].src.large,\n                    indexInGallery: indexInGallery + 1\n                })\n            }\n        }\n    };\n\n    render() {\n        const {gallery,largeImageUrl} = this.state;\n        let largeImage;\n        if (gallery === null) {\n            return null //Nie renderuj niczego, jeżeli dane nie zostały jeszcze ściągnięte\n        }\n        if(largeImageUrl) {\n            largeImage = (\n                \n            <div className='largeImageContainer'> \n                    \n                \n                <img className='activeImage' src={largeImageUrl} alt=''/>\n                <div className=\"largeImageButtons\">\n                <button className=\"close\"onClick={this.closeImage}>X</button>\n                <button className=\"nextArrow\"onClick={this.switchImage}>&lt;</button>\n                <button className=\"prevArrow\"onClick={this.switchImage}>&gt;</button>\n            </div>\n            </div>\n            \n        )}\n        return (\n            <div>\n                <ul>\n                    {gallery.photos.map((photo,index) => { //Mapuj po photos z obiektu galerii\n                        return (\n                            <li className=\"galleryBody\" key={photo.id}>\n                                <div className=\"container\">\n                                    {/* <div>{photo.photographer} </div> */}\n                                    <img className='pictures' src={photo.src.medium} alt=\"\" onClick={() => this.showImage(photo.src.large, index)}/>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n                {largeImage}\n                <div className=\"buttonPosition\">\n                {/*Button Previous i Next - pobranie poprzednich/kolejnych stron dla albumu o danym tagu, lub stron dla albumu strony domyślnej*/}\n                {gallery.prev_page && <button className=\"prevButton\" onClick={() => this.handleRequest(null, gallery.prev_page)}>Previous</button>} {/*Jeżeli obiekt gallery(ze state) posiada klucz prev_page(czyli nie jest pierwszą stroną) to wyrenderuj przycisk Previous. Przycisk na kliknięcie wywołuje metodę handleRequest przekazując jej parametr null jako query oraz atrybut gallery.prev_page(będący adresem Url do następnej strony) jako prevOrNext. Obecność atrybutu prev_page wynika z budowy obiektu(dokumentacja API)).*/}\n                {gallery.next_page && <button className=\"nextButton\" onClick={() => this.handleRequest(null, gallery.next_page)}>Next</button>} {/*Jak wyżej, z tym że atrybut next_page oczywiście nie pojawia się tylko dla ostatniej strony(a nie pierwszej jak dla prev_page)*/}\n                </div>\n            </div>\n        )\n    }\n}\nexport default Gallery;","\nimport React from \"react\";\n\n\nclass Search extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            tag: \"\",\n            option:\"\",\n            \n\n\n        };\n    }\n\n   onClick =() => {\n       this.props.loadText(this.state.tag)\n       this.setState({inputVal: \"\"}) //dokończ\n   }\n   \n   handleChangeForAll = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    } \n\n\n    \n\n    render() {\n        return(\n            <div>\n               <div className =\"inputs\">\n                    <input className=\"imput-style\" placeholder= \"find by tag... \"\n                        name=\"tag\"\n                        value={this.state.tag}\n                        onChange={this.handleChangeForAll}/>               \n                    \n                </div> \n                <button className =\"buttonOne\"\n                    name=\"button\"\n                    onClick={this.onClick}>\n                    Get Picture ! \n                </button>\n                \n\n              \n\n\n            </div>\n        );\n        \n        \n    }\n}\n    \nexport default Search;","import React from \"react\";\nimport './App.css';\n//import Forms from \"../Forms/forms\";\n\nimport Gallery from \"../Gallery/gallery\";\nimport Search from  \"../Search/search\";\n\n\nclass App extends React.Component {\n constructor(props) {\n   super(props)\n   this.state = {\n     text: \"\",\n   }\n }\n setText = (text) => {\n   this.setState({\n     text: text\n   })\n }\n\n render() {\n   return (\n     \n       <div>\n         <div className=\"main\">\n          \n          \n           <h1>\n                Your first <br></br>ten thousand photos <br></br>will be the worst.<br></br>\n          </h1>\n\n          <h4> Henri Cartier Bresson</h4>\n          <h2>Take one of ours...</h2>\n\n          {/* <nav className=\"navigationUP\">   DO ROZBUDOWANIA W PRZYSZŁYM ETAPIE\n                      <ul className=\"nawigationUL\">\n                        <li><a href=\"#\"></a>popular</li>\n                        <li><a href=\"#\"></a>photographer</li>\n                        <li><a href=\"#\"></a>favourites</li>\n                      </ul>\n           </nav> */}\n      </div>\n           <div className=\"form-container\">\n           <Search loadText={this.setText}/>\n           </div>\n           <div className=\"container\">\n             <div className=\"row\">\n             \n               <Gallery term={this.state.text} />\n               {/* <ImageUploader \n                withIcon={true}\n                buttonText='add your photo'\n                onChange={this.onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                maxFileSize={5242880}/> */}\n               \n\n            \n              \n  \n\n             </div>\n             \n           </div>\n         </div>\n       \n\n\n   )\n }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}